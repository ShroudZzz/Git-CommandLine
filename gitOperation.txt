git 检测有没有安装git
git sudo apt-get install git git安装
git init  切换到目标目录 会建立空的仓库
git ls -ah 查看所有文件(隐藏)
git add 提交代码 将工作区的修改存放至暂存区
git commit -m”描述” (多次add  一次commit)
git status命令可以让我们时刻掌握仓库当前的状态
git diff <File> 查看具体修改的内容 (没有add前)
git log 查看版本历史记录 git log --pretty=oneline
git reset —-head HEAD^ 
在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID        和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
git git reset —-hard <版本ID 号> 可以恢复指定当前版本
git reflog git命令记录 可用于追溯 恢复新版本
注意 Zzz
git add把文件添加进去，实际上就是把文件修改添加到暂存区 git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
cat <File>  查看文件
注意  Zzz
第一次修改 -> git add -> 第二次修改 -> git commit
你看，我们前面讲了，Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：
git checkout -- <File> 丢弃工作区的修改 工作区的修改全部撤销 让这个文件回到最近一次git commit或git add时的状态。
git reset HEAD <File> 命令既可以回退版本，也可以把暂存区的修改回退到工作区 之后丢弃修改就是上面的命令
rm <File> 删除文件 git status 可以看见删除状态 
git rm <File> 删除版本库中的文件
git check —- <File> (误删)复原 git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
**************************************************************************************
远程仓库
第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：

$ ssh-keygen -t rsa -C "youremail@example.com"
你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。

如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。

当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。

最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。

如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。
**************************************************************************************
添加远程仓库
1.在GitHub上创建新的仓库
2.在本地仓库路径上 git remote add origin <仓库地址>https://github.com/VermouthC/learngit.git
3.本地库的所有内容推送到远程库上 $ git push -u origin master
我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
4.只要本地作了提交，就可以通过命令 $ git push origin master
**************************************************************************************
克隆远程仓库 
git clone <仓库地址>

**************************************************************************************
创建分支
git checkout -b ‘<分支名称>’
git checkout命令加上-b参数表示创建并切换
相当于以下两条命令：
git branch <分支名称> 创建
git checkout <分支名称> 切换

git branch 查看当前分支
git branch命令会列出所有分支，当前分支前面会标一个*号
提交时就针对于分支
git add readme.txt 
git commit -m "branch test"

dev分支的工作完成，我们就可以切换回master分支：
git checkout master
此时查看文件 分支的改动均不会体现,此时需要合并
git merge <分支名称>

合并完成后就可以删除分支
git branch -d <分支名称>

此时查看branch，就只剩下master分支了 (git branch)
**************************************************************************************
合并分支
git log --graph命令可以看到分支合并图。(git log --graph --pretty=oneline --abbrev-commit)

git merge feature1
Auto-merging readme.txt
CONFLICT (content): Merge conflict in <冲突文件名>
Automatic merge failed; fix conflicts and then commit the result.

git status也可以告诉我们冲突的文件

冲突内容标注
<<<<<<< HEAD<主分支>
Creating a new branch is quick & simple.
=======
Creating a new branch is quick AND simple.
>>>>>>> dev<其他分支>

修改后提交

**************************************************************************************

分支策略
git merge --no-ff -m "merge with no-ff" <分支名称>
git merge --no-ff -m "merge with no-ff" dev
查看分支历史
git log --graph --pretty=oneline --abbrev-commit
**************************************************************************************
Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。

解决流程
1.首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：
git checkout master 切换到主分支
git checkout -b issue-101
2.现在修复bug 然后提交
git add readme.txt
git commit -m "fix bug 101"
3.修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：
git checkout master
$ git merge --no-ff -m "merged bug fix 101" issue-101
git branch -d issue-101
4.接着回到原来你的分支干活了
git checkout dev
git status 工作区干净的Zzz
5.Git把stash内容存在某个地方了，但是需要恢复
git stash list 存储列表
git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
git stash pop，恢复的同时把stash内容也删了
注意:
多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：

$ git stash apply stash@{0}

**************************************************************************************
$ git branch -D <分支名称> 强行删除

**************************************************************************************
查看远程库的信息
git remote 
git remote -v 显示更详细的信息
显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。

推送分支
git push origin <远程分支名>
远程推送原则
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

**************************************************************************************
多人协作 
先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送
注意 指定本地dev分支与远程origin/dev分支的链接 git branch --set-upstream dev origin/<branch>
git pull 拉取
合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push

小结
1.查看远程库信息，使用git remote -v
2.本地新建的分支如果不推送到远程，对其他人就是不可见的
3.从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交
4.在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致
5.建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name
6.从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
**************************************************************************************
标签
创建标签
git branch 查看git 分支
git checkout master 切换分支
git tag <name> 创建新标签  (git tag 所有标签)
注意 
默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
方法是找到历史提交的commit id，然后打上就可以了
git log --pretty=oneline --abbrev-commit 历史记录
git tag <tagName> <id(6224937)>
git show <tagname>  查看标签信息
git tag -a v0.1 -m "version 0.1 released" 3628164 创建带有说明的标签，用-a指定标签名，-m指定说明文字

操作标签
git tag -d v0.1 删除标签
git push origin <tagname> 推送某个标签到远程
git push origin --tags 一次性推送全部尚未推送到远程的本地标签：

标签已经推送到远程 先从本地删除
git tag -d v0.9
然后，从远程删除。删除命令也是push
git push origin :refs/tags/<标签名称>
**************************************************************************************
配置别名
敲git st就表示git status那就简单多了，当然这种偷懒的办法我们是极力赞成的。

我们只需要敲一行命令，告诉Git，以后st就表示status：

git config --global alias.st status

用co表示checkout，ci表示commit，br表示branch：

$ git config --global alias.co checkout
$ git config --global alias.ci commit
$ git config --global alias.br branch

在撤销修改中，我们知道，命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。既然是一个unstage操作，就可以配置一个unstage别名：
git config --global alias.unstage 'reset HEAD'

配置一个git last，让其显示最后一次提交信息：
git config --global alias.last 'log -1’git

lg配置成了
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit”(Zzz)

配置Git的时候,加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用

配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：cat .git/config

**************************************************************************************

搭建Git服务器

阅读: 594749
在远程仓库一节中，我们讲了远程仓库实际上和本地仓库没啥不同，纯粹为了7x24小时开机并交换大家的修改。

GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。

搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。

假设你已经有sudo权限的用户账号，下面，正式开始安装。

第一步，安装git：

$ sudo apt-get install git
第二步，创建一个git用户，用来运行git服务：

$ sudo adduser git
第三步，创建证书登录：

收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

第四步，初始化Git仓库：

先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：

$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：

$ sudo chown -R git:git sample.git
第五步，禁用shell登录：

出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：

git:x:1001:1001:,,,:/home/git:/bin/bash
改为：

git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

第六步，克隆远程仓库：

现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：

$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
剩下的推送就简单了。

管理公钥

如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。

这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。

管理权限

有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。

这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。
*********************************************************************************************
https://zhuanlan.zhihu.com/p/19556676?columnSlug=mactalk
ZSH 简单介绍 Linux 终极武器 ZSH转bash chsh -s /bin/Shell 名称
http://mos86.com/61530.html windows下安装 bash --> oh my zsh
*********************************************************************************************o
Vim 命令  <FileName> = file  
1. vim file     使用vim 打开文件
2. vim file1 file2 file3  打开多个文件
3. :open file   在vim窗口中打开一个新文件
4. :split file  在新窗口中打开文件
5. :bn file     切换到下一个文件
6. :bp file     切换到上一个文件
7. :args        查看当前打开文件列表,当前正在编辑的文件会用[]括起来
8. :e ftp://192.168.10.76/abc.txt 打开远程文件
vim 插入命令
1. i 在当前位置生前插入
2. I 在当前行首插入
3. a 在当前位置后插入
4. A 在当前行尾插入
5. o 在当前行之后插入一行
6. O 在当前行之前插入一行
vim 查找命令
1. /text 查找text n->查找下一个 N->查找前一个
2. ?text 查找text 反向查找 n->查找下一个 N->查找前一个
3. :set ignorecase　　忽略大小写的查找
4. :set noignorecase　不忽略大小写的查找
5. :set hlsearch　　高亮搜索结果，所有结果都高亮显示，而不是只显示一个匹配。
6. :set nohlsearch　　关闭高亮搜索显示
7. :nohlsearch　　关闭当前的高亮显示，如果再次搜索或者按下n或N键，则会再次高亮。
8. :set incsearch　　逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。
9. :set wrapscan　　重新搜索，在搜索到文件头或尾时，返回继续搜索，默认开启
10. u   撤销
11. U   撤销整行操作
12. Ctrl + r 重做
vim 删除命令
1.x 删除当前字符
3x 删除当前光标开始向后三个字符

X 删除当前字符的前一个字符。X=dh

dl 删除当前字符， dl=x

dh 删除前一个字符

dd 删除当前行

dj 删除上一行

dk 删除下一行

10d 删除当前行开始的10行。

D 删除当前字符至行尾。D=d$

d$ 删除当前字符之后的所有字符（本行）

kdgg 删除当前行之前所有行（不包括当前行）

jdG（jd shift + g）   删除当前行之后所有行（不包括当前行）

:1,10d 删除1-10行

:11,$d 删除11行及以后所有的行

:1,$d 删除所有行

J(shift + j)　　删除两行之间的空行，实际上是合并两行。
vim 拷贝和删除
yy 拷贝当前行

nyy 拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行。

p  在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行粘贴。

shift+p 在当前行前粘贴

:1,10 co 20 将1-10行插入到第20行之后。

:1,$ co $ 将整个文件复制一份并添加到文件尾部。

正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按y即可复制

ddp交换当前行和其下一行

xp交换当前字符和其后一个字符

vim 剪切命令

正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按d即可剪切

ndd 剪切当前行之后的n行。利用p命令可以对剪切的内容进行粘贴

:1,10d 将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。

:1, 10 m 20 将第1-10行移动到第20行之后。

vim 退出命令

:wq 保存并退出

ZZ 保存并退出

:q! 强制退出并忽略所有更改

:e! 放弃所有修改，并打开原来文件。

vim 窗口命令

:split或new 打开一个新窗口，光标停在顶层的窗口上

:split file或:new file 用新窗口打开文件

split打开的窗口都是横向的，使用vsplit可以纵向打开窗口。

Ctrl+ww 移动到下一个窗口

Ctrl+wj 移动到下方的窗口

Ctrl+wk 移动到上方的窗口

关闭窗口

:close 最后一个窗口不能使用此命令，可以防止意外退出vim。

:q 如果是最后一个被关闭的窗口，那么将退出vim。

ZZ 保存并退出。

关闭所有窗口，只保留当前窗口

:only

录制宏

按q键加任意字母开始录制，再按q键结束录制（这意味着vim中的宏不可嵌套），使用的时候@加宏名，比如qa。。。q录制名为a的宏，@a使用这个宏。

vim 执行shell命令

:!command

:!ls 列出当前目录下文件

:!perl -c script.pl 检查perl脚本语法，可以不用退出vim，非常方便。

:!perl script.pl 执行perl脚本，可以不用退出vim，非常方便。

:suspend或Ctrl - Z 挂起vim，回到shell，按fg可以返回vim。

vim 注释

perl程序中#开始的行为注释，所以要注释某些行，只需在行首加入#

3,5 s/^/#/g 注释第3-5行

3,5 s/^#//g 解除3-5行的注释

1,$ s/^/#/g 注释整个文档。

:%s/^/#/g 注释整个文档，此法更快。

vim 帮助命令

:help or F1 显示整个帮助
:help xxx 显示xxx的帮助，比如 :help i, :help CTRL-[（即Ctrl+[的帮助）。
:help 'number' Vim选项的帮助用单引号括起
:help <Esc> 特殊键的帮助用<>扩起
:help -t Vim启动参数的帮助用-
：help i_<Esc> 插入模式下Esc的帮助，某个模式下的帮助用模式_主题的模式
帮助文件中位于||之间的内容是超链接，可以用Ctrl+]进入链接，Ctrl+o（Ctrl + t）返回

vim END
